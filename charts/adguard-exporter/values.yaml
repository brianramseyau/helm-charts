# Default values for agduard-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/henrywhitaker3/adguard-exporter:v1.1.16
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 9618
  name: metrics
  # protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: adguard-exporter.*
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: metrics
readinessProbe:
  httpGet:
    path: /
    port: metrics

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

env:
  # you may pass in multiple, as a CSV list, add port if not using http/80 or https/443 (e.g. http://192.168.1.2:3000)
  # e.g. ADGUARD_SERVERS=http://192.168.1.2,http://192.168.1.3,http://192.168.1.4
  - name: ADGUARD_SERVERS
    value: http://192.168.1.2
  # you may pass in multiple, as a CSV list (order same as ADGUARD_SERVERS)
  # ADGUARD_USERNAMES=$USERNAME1,$USERNAME2,$USERNAME3
  - name: ADGUARD_USERNAMES
    value: adguard
  # you may pass in multiple, as a CSV list (order same as ADGUARD_SERVERS)
  # ADGUARD_PASSWORDS=$PASSWORD1,$PASSWORD2,$PASSWORD3
  - name: ADGUARD_PASSWORDS
    valueFrom:
      secretKeyRef:
        key: password
        name: adguard-secret
        optional: true
  # Optional, defaults to 30s
  # - name: INTERVAL
  #   value: 15s

envFrom:
  - secretRef:
      name: adguard-secrets
      optional: true